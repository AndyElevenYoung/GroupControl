package larson.groupcontrol.app.util;import android.os.Environment;import android.text.TextUtils;import android.util.Log;import java.io.BufferedWriter;import java.io.File;import java.io.FileOutputStream;import java.io.IOException;import java.io.OutputStreamWriter;import java.text.DateFormat;import java.text.SimpleDateFormat;import java.util.Date;import java.util.Formatter;import java.util.Locale;/** * @author zhonglunshun */public class LogUtils {    /**     * 自定义Tag的前缀，可以是作者名     */    private static final String CUSTOM_TAG_PREFIX = "GroupControl";    /**     * 是否把保存日志到SD卡中     */    private static boolean isSaveLog = false;    /**     * // SD卡中的根目录     */    private static final String LOG_PATH = Environment.getExternalStorageDirectory().getPath();    private static DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd", Locale.SIMPLIFIED_CHINESE);    private LogUtils() {    }    public static void setDebugMode(boolean debug) {        setAllowLog(true);        if (!debug) {            isSaveLog = true;        }    }    private static void setAllowLog(boolean flag) {        allowD = flag;        allowE = flag;        allowI = flag;        allowV = flag;        allowW = flag;    }    /**     * 容许打印日志的类型，默认是true，设置为false则不打印     */    private static boolean allowD = true;    private static boolean allowE = true;    private static boolean allowI = true;    private static boolean allowV = true;    private static boolean allowW = true;    private static boolean allowWtf = true;    private static String generateTag(StackTraceElement caller) {        // 占位符        String tag = "%s.%s(Line:%d)";        // 获取到类名        String callerClazzName = caller.getClassName();        callerClazzName = callerClazzName.substring(callerClazzName.lastIndexOf(".") + 1);        // 替换        tag = String.format(Locale.CHINA, tag, callerClazzName, caller.getMethodName(), caller.getLineNumber());        tag = TextUtils.isEmpty(CUSTOM_TAG_PREFIX) ? tag : CUSTOM_TAG_PREFIX + ":" + tag;        return tag;    }    public static void d(String content) {        if (!allowD) {            return;        }        StackTraceElement caller = getCallerStackTraceElement();        String tag = generateTag(caller);        Log.d(tag, content);        if (isSaveLog) {            point(LOG_PATH, tag, content);        }    }    public static void d(String content, Throwable e) {        if (!allowD) {            return;        }        StackTraceElement caller = getCallerStackTraceElement();        String tag = generateTag(caller);        Log.d(tag, content, e);        if (isSaveLog) {            point(LOG_PATH, tag, content);        }    }    public static void e(String content) {        if (!allowE) {            return;        }        StackTraceElement caller = getCallerStackTraceElement();        String tag = generateTag(caller);        if (isSaveLog) {            point(LOG_PATH, tag, content);        }else{            Log.e(tag, content);        }    }    public static void e(Throwable e) {        if (!allowE) {            return;        }        StackTraceElement caller = getCallerStackTraceElement();        String tag = generateTag(caller);        if (isSaveLog) {            point(LOG_PATH, tag, e.getMessage());        }else{            Log.e(tag, e.getMessage(), e);        }    }    public static void e(String content, Throwable e) {        if (!allowE) {            return;        }        StackTraceElement caller = getCallerStackTraceElement();        String tag = generateTag(caller);        if (isSaveLog) {            point(LOG_PATH, tag, e.getMessage());        }else{            Log.e(tag, content, e);        }    }    public static void i(String content) {        if (!allowI) {            return;        }        StackTraceElement caller = getCallerStackTraceElement();        String tag = generateTag(caller);        if (isSaveLog) {            point(LOG_PATH, tag, content);        }else{            Log.i(tag, content);        }    }    public static void i(String content, Throwable e) {        if (!allowI) {            return;        }        StackTraceElement caller = getCallerStackTraceElement();        String tag = generateTag(caller);        if (isSaveLog) {            point(LOG_PATH, tag, content);        }else{            Log.i(tag, content, e);        }    }    public static void v(String content) {        if (!allowV) {            return;        }        StackTraceElement caller = getCallerStackTraceElement();        String tag = generateTag(caller);        if (isSaveLog) {            point(LOG_PATH, tag, content);        }else{            Log.v(tag, content);        }    }    public static void v(String content, Throwable e) {        if (!allowV) {            return;        }        StackTraceElement caller = getCallerStackTraceElement();        String tag = generateTag(caller);        if (isSaveLog) {            point(LOG_PATH, tag, content);        }else{            Log.v(tag, content, e);        }    }    public static void w(String content) {        if (!allowW) {            return;        }        StackTraceElement caller = getCallerStackTraceElement();        String tag = generateTag(caller);        if (isSaveLog) {            point(LOG_PATH, tag, content);        }else{            Log.w(tag, content);        }    }    public static void w(String content, Throwable e) {        if (!allowW) {            return;        }        StackTraceElement caller = getCallerStackTraceElement();        String tag = generateTag(caller);        if (isSaveLog) {            point(LOG_PATH, tag, content);        }else{            Log.w(tag, content, e);        }    }    public static void w(Throwable e) {        if (!allowW) {            return;        }        StackTraceElement caller = getCallerStackTraceElement();        String tag = generateTag(caller);        if (isSaveLog) {            point(LOG_PATH, tag, e.toString());        }else{            Log.w(tag, e);        }    }    public static void wtf(String content) {        if (!allowWtf) {            return;        }        StackTraceElement caller = getCallerStackTraceElement();        String tag = generateTag(caller);        if (isSaveLog) {            point(LOG_PATH, tag, content);        }else{            Log.wtf(tag, content);        }    }    public static void wtf(String content, Throwable e) {        if (!allowWtf) {            return;        }        StackTraceElement caller = getCallerStackTraceElement();        String tag = generateTag(caller);        if (isSaveLog) {            point(LOG_PATH, tag, content);        }else{            Log.wtf(tag, content, e);        }    }    public static void wtf(Throwable e) {        if (!allowWtf) {            return;        }        StackTraceElement caller = getCallerStackTraceElement();        String tag = generateTag(caller);        if (isSaveLog) {            point(LOG_PATH, tag, e.toString());        }else{            Log.wtf(tag, e);        }    }    private static StackTraceElement getCallerStackTraceElement() {        return Thread.currentThread().getStackTrace()[4];    }    public static void point(String path, String tag, String msg) {        if (isSDAva()) {            /*long timestamp = System.currentTimeMillis();*/            String time = formatter.format(new Date());            path = path + "/Skyruler/logs/log-" + time   + ".log";            File file = new File(path);            if (!file.exists()) {                createDipPath(path);            }            BufferedWriter out = null;            try {                out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file, true)));                out.write(time + " " + tag + " " + msg + "\r\n");            } catch (Exception e) {                e.printStackTrace();            } finally {                try {                    if (out != null) {                        out.close();                    }                } catch (IOException e) {                    e.printStackTrace();                }            }        }    }    /**     * 根据文件路径 递归创建文件     */    private static void createDipPath(String file) {        String parentFile = file.substring(0, file.lastIndexOf("/"));        File file1 = new File(file);        File parent = new File(parentFile);        if (!file1.exists()) {            parent.mkdirs();            try {                boolean isSucess = file1.createNewFile();                System.out.print("create new file " + file1.getAbsolutePath() + " :" + isSucess);            } catch (IOException e) {                e.printStackTrace();            }        }    }    private static class ReusableFormatter {        private Formatter formatter;        private StringBuilder builder;        public ReusableFormatter() {            builder = new StringBuilder();            formatter = new Formatter(builder);        }        public String format(String msg, Object... args) {            formatter.format(msg, args);            String s = builder.toString();            builder.setLength(0);            return s;        }    }    private static final ThreadLocal<ReusableFormatter> THREAD_LOCAL_FORMATTER = new ThreadLocal<ReusableFormatter>() {        @Override        protected ReusableFormatter initialValue() {            return new ReusableFormatter();        }    };    public static String format(String msg, Object... args) {        ReusableFormatter formatter = THREAD_LOCAL_FORMATTER.get();        return formatter.format(msg, args);    }    private static boolean isSDAva() {        return Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED) || Environment.getExternalStorageDirectory().exists();    }}